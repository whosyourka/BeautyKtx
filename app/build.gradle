apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//注意点：executionData是测试的exec或ec后缀报告  classDirectories包含的编译后路径   sourceDirectories 为源码路径
apply plugin: 'jacoco'
task jacocoTestReport(type: JacocoReport) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }


    def coverageSourceDirs = [
            '../app/src/main/java'
    ]
    sourceDirectories = files(coverageSourceDirs)

    def fileFilter = ['**/R*.class',
                          '**/*$InjectAdapter.class',
                          '**/*$ModuleAdapter.class',
                          '**/*$ViewInjector*.class',
                          '**/BuildConfig.class'
    ]
    //编译后字节文件地址，看个人的路径是哪个
//    classDirectories = fileTree(dir: '../app/build/intermediates/javac/debug/', excludes: fileFilter)
    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/", excludes: fileFilter) //we use "debug" build type for test coverage (can be other)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug/", excludes: fileFilter)
    classDirectories = files([javaDebugTree],[kotlinDebugTree]) // we need to target both java and kotlin build folder

//    executionData = fileTree(dir: project.projectDir, includes:['**/*.exec', '**/*.ec'])
//    android ec路径
//    executionData = files("$buildDir/outputs/code-coverage/connected/flavors/TEST_IN/APOS A8 - 5.1.1-coverage.ec")
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")

//    doFirst {
//        new File("$buildDir/intermediates/javac/debug/").eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//        new File("$buildDir/tmp/kotlin-classes/debug/").eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
}

android {
    compileSdkVersion 28
    dataBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.whosyourka.beauty"
        minSdkVersion 21
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            //资源压缩
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            //资源压缩
            testCoverageEnabled true
            shrinkResources false
            minifyEnabled false
            //Android 插件压缩器不会对您的代码进行混淆处理或优化
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //语言
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.1.0-alpha05'


    //android 自带
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    //测试
    //junit
    testImplementation 'junit:junit:4.12'
    //robolectric 版本（sdk23需导入opengl-apk）
    testImplementation "org.robolectric:robolectric:3.8"
    testImplementation 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    //mockito
    testImplementation "org.mockito:mockito-core:2.8.9"
    //powermockito  这个要和mockito一一对应
    testImplementation "org.powermock:powermock-module-junit4:1.7.3"
    testImplementation "org.powermock:powermock-module-junit4-rule:1.7.3"
    testImplementation "org.powermock:powermock-api-mockito2:1.7.3" //注意这里是mockito2
    testImplementation "org.powermock:powermock-classloading-xstream:1.7.3"

    //as自带（as3.2自带0.5），导入最新的和as自带的espresso自动化插件有问题
    //androidTestCompile 'com.android.support.test:runner:0.5'
    // Set this dependency to use JUnit 4 rules
    //androidTestCompile 'com.android.support.test:rules:0.5'
    //android 3.3 支持最新的1.1.1
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    //andorid mockito
    androidTestImplementation "org.mockito:mockito-android:2.8.9"
    //espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    //espresso导入idlingResource(代码和测试有关联)
    //有用到才导入
    //implementation "androidx.test.espresso:espresso-idling-resource:3.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:3.1.1"
    // Set this dependency to build and run UI Automator tests
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

//    implementation project(':commonlibrary')
    //其他包
    implementation rootProject.ext.dependencies["workmanagerjava"]
    implementation rootProject.ext.dependencies["workmanagerKotln"]
    implementation rootProject.ext.dependencies["workmanagerRx"]
//    androidTestImplementation  rootProject.ext.dependencies["workmanagerTest"]

    ext.leakcarry_version = "2.0-alpha-1"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcarry_version"
}
